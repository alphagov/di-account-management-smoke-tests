AWSTemplateFormatVersion: "2010-09-09"
Description: "This creates a canary test for the unauthenticated journey + alarm + SNS topic for the alarm"
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProductTagValue:
    Description: Value for the Product Tag
    Type: String
    Default: GOV.UK Sign In
  SystemTagValue:
    Description: Value for the System Tag
    Type: String
    Default: Accounts
  OwnerTagValue:
    Description: Value for the Owner Tag
    Type: String
    Default: govuk-accounts-tech@digital.cabinet-office.gov.uk
  SourceTagValue:
    Description: Value for the Source Tag
    Type: String
    Default: alphagov/di-account-management-frontend/deploy/template.yaml


Resources:

  CanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - s3:PutObject
          - s3:GetObject
          Resource: !Ref UnauthJourneyCanary
        - Effect: Allow
          Action:
          - s3:GetBucketLocation
          Resource:
          - arn:aws:s3:::cw-syn-results-666500506359-eu-west-2
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          - logs:CreateLogGroup
          Resource:
          - arn:aws:logs:eu-west-2:666500506359:log-group:/aws/lambda/cwsyn-unauth-canary-*
        - Effect: Allow
          Action:
          - s3:ListAllMyBuckets
          - xray:PutTraceSegments
          Resource:
          - "*"
        - Effect: Allow
          Resource: "*"
          Action: cloudwatch:PutMetricData
          Condition:
            StringEquals:
              cloudwatch:namespace: CloudWatchSynthetics

  ThanksTextCanary:
    Type: AWS::Synthetics::Canary
    Properties: 
      Name: "thanks-txt-canary"
      ArtifactConfig: 
          S3Encryption: S3Encryption
      ArtifactS3Location: "s3://canary/eu-west-2/unauth-canary"
      Code: 
        Handler: thanksPageCanary.handler
        Script: |
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          const syntheticsConfiguration = synthetics.getConfiguration();
          const syntheticsLogHelper = require('SyntheticsLogHelper');

          const CANARY_NAME = synthetics.getCanaryName();
          const SYNTHETICS_CONFIG = synthetics.getConfiguration();

          SYNTHETICS_CONFIG.setConfig({
              screenshotOnStepStart: false,
              screenshotOnStepSuccess: true,
              screenshotOnStepFailure: true,
          });

          exports.handler = async () => {
              return await testThanksPageLoads();
          };

          const testThanksPageLoads = async function () {
              const thanks_url = ['https://home.integration.account.gov.uk/.well-known/thanks.txt'];
              await loadUrl(page, thanks_url); 
          }

          const loadUrl = async function (page, url) {
              let stepName = null;
              let domcontentloaded = false;

              try {
                  stepName = new URL(url).hostname;
              } catch (e) {
                  const errorString = `Error parsing url: ${url}. ${e}`;
                  log.error(errorString);
                  throw e;
              }

              await synthetics.executeStep(stepName, async function () {
                  const sanitizedUrl = syntheticsLogHelper.getSanitizedUrl(url);

                  const response = await page.goto(url, { waitUntil: ['domcontentloaded'], timeout: 3000});
                  if (response) {
                      domcontentloaded = true;
                      const status = response.status();
                      const statusText = response.statusText();
                      
                      logResponseString = `Response from url: ${sanitizedUrl}  Status: ${status}  Status Text: ${statusText}`;

                      //If the response status code is not a 2xx success code
                      if (response.status() < 200 || response.status() > 299) {
                          throw new Error(`Failed to load url: ${sanitizedUrl} ${response.status()} ${response.statusText()}`);
                      }
                  } else {
                      const logNoResponseString = `No response returned for url: ${sanitizedUrl}`;
                      log.error(logNoResponseString);
                      throw new Error(logNoResponseString);
                  }
              });

              // Wait for 3 seconds to let page load fully before taking screenshot.
              if (domcontentloaded) {
                  await page.waitFor(3000);
                  await synthetics.takeScreenshot(stepName, 'loaded');
                  // Reset the page in-between tests
                  await resetPage(page);
              }
          };

          const resetPage = async function(page) {
              try {
                  await page.goto('about:blank',{waitUntil: ['load', 'networkidle0'], timeout: 3000} );
              } catch (e) {
                  synthetics.addExecutionError('Unable to open a blank page. ', e);
              }
          }
      DeleteLambdaResourcesOnCanaryDeletion: true
      ExecutionRoleArn: !Ref CanaryRole
      RunConfig: 
          ActiveTracing: false
          EnvironmentVariables: 
            # Key : Value         # TODO
          TimeoutInSeconds: 10
      RuntimeVersion: syn-nodejs-puppeteer-3.9
      Schedule: 
        Expression: "rate(5 minutes)"
      StartCanaryAfterCreation: true
      Tags:
        - Key: Product
          Value: !Ref ProductTagValue
        - Key: System
          Value: !Ref SystemTagValue
        # - Key: Environment   TODO
        #   Value: !Ref Environment
        - Key: Owner
          Value: !Ref OwnerTagValue
        - Key: Source
          Value: !Ref SourceTagValue


  #     SaveDeadLetterQueueAlarm:
  #       Type: AWS::CloudWatch::Alarm
  #       Properties:
  #         AlarmName:
  #           !Join [
  #             "-",
  #             [!Ref AWS::StackName, !Ref Environment, SaveDeadLetterQueueAlarm],
  #           ]
  #         Namespace: "AWS/SQS"
  #         MetricName: "ApproximateNumberOfMessagesVisible"
  #         Dimensions:
  #           - Name: "QueueName"
  #             Value: !GetAtt SaveRawEventsDeadLetterQueue.QueueName
  #         Statistic: "Sum"
  #         Period: 300
  #         EvaluationPeriods: 1
  #         Threshold: 1


  # CloudWatch Alert Canary test failure SNS Topic:

    # below has been adapted from di-infra/platform-alerting

    # NotificationTopicKey:
    #   Type: AWS::KMS::Key
    #   Properties:
    #     EnableKeyRotation: true
    #     KeyPolicy:
    #       Version: 2012-10-17
    #       Statement:
    #         - Sid: "Allow the account to manage the key"
    #           Effect: Allow
    #           Principal:
    #             AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
    #           Action: "kms:*"
    #           Resource: "*"
    #         - Sid: "Allow CodeStar Notifications to enqueue encrypted messages"
    #           Effect: Allow
    #           Resource: "*"
    #           Action:
    #             - "kms:Decrypt"
    #             - "kms:GenerateDataKey"
    #           Principal:
    #             Service: codestar-notifications.amazonaws.com
    #         - Sid: "Allow Cloudwatch alerts access"
    #           Effect: Allow
    #           Principal:
    #             Service: cloudwatch.amazonaws.com
    #           Action:
    #             - "kms:Encrypt*"
    #             - "kms:Decrypt*"
    #             - "kms:ReEncrypt*"
    #             - "kms:GenerateDataKey*"
    #             - "kms:Describe*"
    #           Resource:
    #             - "*"
    #     Tags:
    #       - Key: Name
    #         Value: !Sub "${AWS::StackName}-NotificationTopicKey"
    #       - Key: Product
    #         Value: !Ref ProductTagValue
    #       - Key: System
    #         Value: !Ref SystemTagValue
    #       - Key: Environment
    #         Value: !Ref Environment
    #       - Key: Owner
    #         Value: !Ref OwnerTagValue
    #       - Key: Source
    #         Value: !Ref SourceTagValue

    # CanaryTestFailureTopic:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     TopicName: !Sub "${AWS::StackName}-CanaryTestFailureTopic"
    #     KmsMasterKeyId: !Ref NotificationTopicKey
    #     Tags:
    #       - Key: Product
    #         Value: !Ref ProductTagValue
    #       - Key: System
    #         Value: !Ref SystemTagValue
    #       - Key: Environment
    #         Value: !Ref Environment
    #       - Key: Owner
    #         Value: !Ref OwnerTagValue
    #       - Key: Source
    #         Value: !Ref SourceTagValue

    # CanaryTestFailureTopicPolicy:
    #   Type: AWS::SNS::TopicPolicy
    #   Properties:
    #     Topics:
    #       - !Ref CanaryTestFailureTopic
    #     PolicyDocument:
    #       Statement:
    #         - Sid: AllowCloudWatchAlarmsToPublishToSNS
    #           Action: "sns:Publish"
    #           Effect: Allow
    #           Resource: !Ref CanaryTestFailureTopic
    #           Principal:
    #             Service: cloudwatch.amazonaws.com

    # UnauthCanaryAlarm:
    #   Type: AWS::CloudWatch::Alarm
    #   Properties:
    #       AlarmName: !Sub "${AWS::StackName}-unauth-canary-alarm"
    #       AlarmDescription: "Trigger alarm if the unauth journey canary has failed more than or equal to 2 times in 15 minutes "
    #       ActionsEnabled: true
    #       AlarmActions:
    #           - !Ref CanaryTestFailureTopic
    #       MetricName: Failed
    #       Namespace: CloudWatchSynthetics
    #       Statistic: Sum
    #       Dimensions:
    #           - Name: CanaryName
    #             Value: unauth-canary
    #       Period: 900 #seconds
    #       EvaluationPeriods: 1
    #       DatapointsToAlarm: 1
    #       Threshold: 2
    #       ComparisonOperator: GreaterThanOrEqualToThreshold
    #       TreatMissingData: breaching
          